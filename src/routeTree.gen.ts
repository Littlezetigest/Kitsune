/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UploadBackupImport } from './routes/upload-backup'
import { Route as UploadImport } from './routes/upload'
import { Route as SimulatorImport } from './routes/simulator'
import { Route as ProfileImport } from './routes/profile'
import { Route as OptimizerImport } from './routes/optimizer'
import { Route as MetaAnalyzerImport } from './routes/meta-analyzer'
import { Route as CommandImport } from './routes/command'
import { Route as ArchetypesImport } from './routes/archetypes'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AnalysisConversationIdImport } from './routes/analysis.$conversationId'

// Create/Update Routes

const UploadBackupRoute = UploadBackupImport.update({
  id: '/upload-backup',
  path: '/upload-backup',
  getParentRoute: () => rootRoute,
} as any)

const UploadRoute = UploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRoute,
} as any)

const SimulatorRoute = SimulatorImport.update({
  id: '/simulator',
  path: '/simulator',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const OptimizerRoute = OptimizerImport.update({
  id: '/optimizer',
  path: '/optimizer',
  getParentRoute: () => rootRoute,
} as any)

const MetaAnalyzerRoute = MetaAnalyzerImport.update({
  id: '/meta-analyzer',
  path: '/meta-analyzer',
  getParentRoute: () => rootRoute,
} as any)

const CommandRoute = CommandImport.update({
  id: '/command',
  path: '/command',
  getParentRoute: () => rootRoute,
} as any)

const ArchetypesRoute = ArchetypesImport.update({
  id: '/archetypes',
  path: '/archetypes',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AnalysisConversationIdRoute = AnalysisConversationIdImport.update({
  id: '/analysis/$conversationId',
  path: '/analysis/$conversationId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/archetypes': {
      id: '/archetypes'
      path: '/archetypes'
      fullPath: '/archetypes'
      preLoaderRoute: typeof ArchetypesImport
      parentRoute: typeof rootRoute
    }
    '/command': {
      id: '/command'
      path: '/command'
      fullPath: '/command'
      preLoaderRoute: typeof CommandImport
      parentRoute: typeof rootRoute
    }
    '/meta-analyzer': {
      id: '/meta-analyzer'
      path: '/meta-analyzer'
      fullPath: '/meta-analyzer'
      preLoaderRoute: typeof MetaAnalyzerImport
      parentRoute: typeof rootRoute
    }
    '/optimizer': {
      id: '/optimizer'
      path: '/optimizer'
      fullPath: '/optimizer'
      preLoaderRoute: typeof OptimizerImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/simulator': {
      id: '/simulator'
      path: '/simulator'
      fullPath: '/simulator'
      preLoaderRoute: typeof SimulatorImport
      parentRoute: typeof rootRoute
    }
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadImport
      parentRoute: typeof rootRoute
    }
    '/upload-backup': {
      id: '/upload-backup'
      path: '/upload-backup'
      fullPath: '/upload-backup'
      preLoaderRoute: typeof UploadBackupImport
      parentRoute: typeof rootRoute
    }
    '/analysis/$conversationId': {
      id: '/analysis/$conversationId'
      path: '/analysis/$conversationId'
      fullPath: '/analysis/$conversationId'
      preLoaderRoute: typeof AnalysisConversationIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/archetypes': typeof ArchetypesRoute
  '/command': typeof CommandRoute
  '/meta-analyzer': typeof MetaAnalyzerRoute
  '/optimizer': typeof OptimizerRoute
  '/profile': typeof ProfileRoute
  '/simulator': typeof SimulatorRoute
  '/upload': typeof UploadRoute
  '/upload-backup': typeof UploadBackupRoute
  '/analysis/$conversationId': typeof AnalysisConversationIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/archetypes': typeof ArchetypesRoute
  '/command': typeof CommandRoute
  '/meta-analyzer': typeof MetaAnalyzerRoute
  '/optimizer': typeof OptimizerRoute
  '/profile': typeof ProfileRoute
  '/simulator': typeof SimulatorRoute
  '/upload': typeof UploadRoute
  '/upload-backup': typeof UploadBackupRoute
  '/analysis/$conversationId': typeof AnalysisConversationIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/archetypes': typeof ArchetypesRoute
  '/command': typeof CommandRoute
  '/meta-analyzer': typeof MetaAnalyzerRoute
  '/optimizer': typeof OptimizerRoute
  '/profile': typeof ProfileRoute
  '/simulator': typeof SimulatorRoute
  '/upload': typeof UploadRoute
  '/upload-backup': typeof UploadBackupRoute
  '/analysis/$conversationId': typeof AnalysisConversationIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/archetypes'
    | '/command'
    | '/meta-analyzer'
    | '/optimizer'
    | '/profile'
    | '/simulator'
    | '/upload'
    | '/upload-backup'
    | '/analysis/$conversationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/archetypes'
    | '/command'
    | '/meta-analyzer'
    | '/optimizer'
    | '/profile'
    | '/simulator'
    | '/upload'
    | '/upload-backup'
    | '/analysis/$conversationId'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/archetypes'
    | '/command'
    | '/meta-analyzer'
    | '/optimizer'
    | '/profile'
    | '/simulator'
    | '/upload'
    | '/upload-backup'
    | '/analysis/$conversationId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  ArchetypesRoute: typeof ArchetypesRoute
  CommandRoute: typeof CommandRoute
  MetaAnalyzerRoute: typeof MetaAnalyzerRoute
  OptimizerRoute: typeof OptimizerRoute
  ProfileRoute: typeof ProfileRoute
  SimulatorRoute: typeof SimulatorRoute
  UploadRoute: typeof UploadRoute
  UploadBackupRoute: typeof UploadBackupRoute
  AnalysisConversationIdRoute: typeof AnalysisConversationIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  ArchetypesRoute: ArchetypesRoute,
  CommandRoute: CommandRoute,
  MetaAnalyzerRoute: MetaAnalyzerRoute,
  OptimizerRoute: OptimizerRoute,
  ProfileRoute: ProfileRoute,
  SimulatorRoute: SimulatorRoute,
  UploadRoute: UploadRoute,
  UploadBackupRoute: UploadBackupRoute,
  AnalysisConversationIdRoute: AnalysisConversationIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/archetypes",
        "/command",
        "/meta-analyzer",
        "/optimizer",
        "/profile",
        "/simulator",
        "/upload",
        "/upload-backup",
        "/analysis/$conversationId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx"
    },
    "/archetypes": {
      "filePath": "archetypes.tsx"
    },
    "/command": {
      "filePath": "command.tsx"
    },
    "/meta-analyzer": {
      "filePath": "meta-analyzer.tsx"
    },
    "/optimizer": {
      "filePath": "optimizer.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/simulator": {
      "filePath": "simulator.tsx"
    },
    "/upload": {
      "filePath": "upload.tsx"
    },
    "/upload-backup": {
      "filePath": "upload-backup.tsx"
    },
    "/analysis/$conversationId": {
      "filePath": "analysis.$conversationId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
